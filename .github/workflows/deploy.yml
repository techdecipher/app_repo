name: Build & Deploy Website (EC2 via SSM)

on:
  push:
    branches: [ main ]

env:
  AWS_REGION:       ${{ secrets.AWS_REGION }}
  ECR_REPO_URI:     ${{ secrets.ECR_REPO_URI }}     # from infra output
  EC2_INSTANCE_ID:  ${{ secrets.EC2_INSTANCE_ID }}  # from infra output

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push image
      run: |
        IMAGE_TAG=${GITHUB_SHA::7}
        docker build -t $ECR_REPO_URI:$IMAGE_TAG .
        docker push $ECR_REPO_URI:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy on EC2 via SSM
      run: |
        set -e
        REGISTRY="${ECR_REPO_URI%/*}"

        cat > payload.json <<EOF
        {
          "DocumentName": "AWS-RunShellScript",
          "Comment": "Deploy website container",
          "InstanceIds": ["$EC2_INSTANCE_ID"],
          "Parameters": {
          "commands": [
          "set -e",
          "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY",
          "docker pull $ECR_REPO_URI:$IMAGE_TAG",
          "docker rm -f site || true",
          "docker run -d --name site -p 80:80 --restart unless-stopped $ECR_REPO_URI:$IMAGE_TAG",
          "docker image prune -f || true",
          "docker ps --format \\\"table {{.ID}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}\\\""
        ]
      }
    }
    EOF

    aws ssm send-command --region "$AWS_REGION" --cli-input-json file://payload.json
